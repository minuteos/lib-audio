/*
 * Copyright (c) 2019 triaxis s.r.o.
 * Licensed under the MIT license. See LICENSE.txt file in the repository root
 * for full license information.
 *
 * audio/PDM2PCM.cpp
 */

#include "PDM2PCM.h"

namespace audio
{

void PDM2PCM::Reset()
{
    // set a zero-level state
    state = { 34, 206, 21504, 109568 };
}

typedef struct
{
    uint16_t t1;
    uint8_t t0, t2;
} interleaved_t;

static const interleaved_t T[] = {
    { 0, 0, 0 }, { 36, 28, 0 }, { 42, 21, 1 }, { 78, 49, 1 }, { 46, 15, 3 }, { 82, 43, 3 }, { 88, 36, 4 }, { 124, 64, 4 },
    { 48, 10, 6 }, { 84, 38, 6 }, { 90, 31, 7 }, { 126, 59, 7 }, { 94, 25, 9 }, { 130, 53, 9 }, { 136, 46, 10 }, { 172, 74, 10 },
    { 48, 6, 10 }, { 84, 34, 10 }, { 90, 27, 11 }, { 126, 55, 11 }, { 94, 21, 13 }, { 130, 49, 13 }, { 136, 42, 14 }, { 172, 70, 14 },
    { 96, 16, 16 }, { 132, 44, 16 }, { 138, 37, 17 }, { 174, 65, 17 }, { 142, 31, 19 }, { 178, 59, 19 }, { 184, 52, 20 }, { 220, 80, 20 },
    { 46, 3, 15 }, { 82, 31, 15 }, { 88, 24, 16 }, { 124, 52, 16 }, { 92, 18, 18 }, { 128, 46, 18 }, { 134, 39, 19 }, { 170, 67, 19 },
    { 94, 13, 21 }, { 130, 41, 21 }, { 136, 34, 22 }, { 172, 62, 22 }, { 140, 28, 24 }, { 176, 56, 24 }, { 182, 49, 25 }, { 218, 77, 25 },
    { 94, 9, 25 }, { 130, 37, 25 }, { 136, 30, 26 }, { 172, 58, 26 }, { 140, 24, 28 }, { 176, 52, 28 }, { 182, 45, 29 }, { 218, 73, 29 },
    { 142, 19, 31 }, { 178, 47, 31 }, { 184, 40, 32 }, { 220, 68, 32 }, { 188, 34, 34 }, { 224, 62, 34 }, { 230, 55, 35 }, { 266, 83, 35 },
    { 42, 1, 21 }, { 78, 29, 21 }, { 84, 22, 22 }, { 120, 50, 22 }, { 88, 16, 24 }, { 124, 44, 24 }, { 130, 37, 25 }, { 166, 65, 25 },
    { 90, 11, 27 }, { 126, 39, 27 }, { 132, 32, 28 }, { 168, 60, 28 }, { 136, 26, 30 }, { 172, 54, 30 }, { 178, 47, 31 }, { 214, 75, 31 },
    { 90, 7, 31 }, { 126, 35, 31 }, { 132, 28, 32 }, { 168, 56, 32 }, { 136, 22, 34 }, { 172, 50, 34 }, { 178, 43, 35 }, { 214, 71, 35 },
    { 138, 17, 37 }, { 174, 45, 37 }, { 180, 38, 38 }, { 216, 66, 38 }, { 184, 32, 40 }, { 220, 60, 40 }, { 226, 53, 41 }, { 262, 81, 41 },
    { 88, 4, 36 }, { 124, 32, 36 }, { 130, 25, 37 }, { 166, 53, 37 }, { 134, 19, 39 }, { 170, 47, 39 }, { 176, 40, 40 }, { 212, 68, 40 },
    { 136, 14, 42 }, { 172, 42, 42 }, { 178, 35, 43 }, { 214, 63, 43 }, { 182, 29, 45 }, { 218, 57, 45 }, { 224, 50, 46 }, { 260, 78, 46 },
    { 136, 10, 46 }, { 172, 38, 46 }, { 178, 31, 47 }, { 214, 59, 47 }, { 182, 25, 49 }, { 218, 53, 49 }, { 224, 46, 50 }, { 260, 74, 50 },
    { 184, 20, 52 }, { 220, 48, 52 }, { 226, 41, 53 }, { 262, 69, 53 }, { 230, 35, 55 }, { 266, 63, 55 }, { 272, 56, 56 }, { 308, 84, 56 },
    { 36, 0, 28 }, { 72, 28, 28 }, { 78, 21, 29 }, { 114, 49, 29 }, { 82, 15, 31 }, { 118, 43, 31 }, { 124, 36, 32 }, { 160, 64, 32 },
    { 84, 10, 34 }, { 120, 38, 34 }, { 126, 31, 35 }, { 162, 59, 35 }, { 130, 25, 37 }, { 166, 53, 37 }, { 172, 46, 38 }, { 208, 74, 38 },
    { 84, 6, 38 }, { 120, 34, 38 }, { 126, 27, 39 }, { 162, 55, 39 }, { 130, 21, 41 }, { 166, 49, 41 }, { 172, 42, 42 }, { 208, 70, 42 },
    { 132, 16, 44 }, { 168, 44, 44 }, { 174, 37, 45 }, { 210, 65, 45 }, { 178, 31, 47 }, { 214, 59, 47 }, { 220, 52, 48 }, { 256, 80, 48 },
    { 82, 3, 43 }, { 118, 31, 43 }, { 124, 24, 44 }, { 160, 52, 44 }, { 128, 18, 46 }, { 164, 46, 46 }, { 170, 39, 47 }, { 206, 67, 47 },
    { 130, 13, 49 }, { 166, 41, 49 }, { 172, 34, 50 }, { 208, 62, 50 }, { 176, 28, 52 }, { 212, 56, 52 }, { 218, 49, 53 }, { 254, 77, 53 },
    { 130, 9, 53 }, { 166, 37, 53 }, { 172, 30, 54 }, { 208, 58, 54 }, { 176, 24, 56 }, { 212, 52, 56 }, { 218, 45, 57 }, { 254, 73, 57 },
    { 178, 19, 59 }, { 214, 47, 59 }, { 220, 40, 60 }, { 256, 68, 60 }, { 224, 34, 62 }, { 260, 62, 62 }, { 266, 55, 63 }, { 302, 83, 63 },
    { 78, 1, 49 }, { 114, 29, 49 }, { 120, 22, 50 }, { 156, 50, 50 }, { 124, 16, 52 }, { 160, 44, 52 }, { 166, 37, 53 }, { 202, 65, 53 },
    { 126, 11, 55 }, { 162, 39, 55 }, { 168, 32, 56 }, { 204, 60, 56 }, { 172, 26, 58 }, { 208, 54, 58 }, { 214, 47, 59 }, { 250, 75, 59 },
    { 126, 7, 59 }, { 162, 35, 59 }, { 168, 28, 60 }, { 204, 56, 60 }, { 172, 22, 62 }, { 208, 50, 62 }, { 214, 43, 63 }, { 250, 71, 63 },
    { 174, 17, 65 }, { 210, 45, 65 }, { 216, 38, 66 }, { 252, 66, 66 }, { 220, 32, 68 }, { 256, 60, 68 }, { 262, 53, 69 }, { 298, 81, 69 },
    { 124, 4, 64 }, { 160, 32, 64 }, { 166, 25, 65 }, { 202, 53, 65 }, { 170, 19, 67 }, { 206, 47, 67 }, { 212, 40, 68 }, { 248, 68, 68 },
    { 172, 14, 70 }, { 208, 42, 70 }, { 214, 35, 71 }, { 250, 63, 71 }, { 218, 29, 73 }, { 254, 57, 73 }, { 260, 50, 74 }, { 296, 78, 74 },
    { 172, 10, 74 }, { 208, 38, 74 }, { 214, 31, 75 }, { 250, 59, 75 }, { 218, 25, 77 }, { 254, 53, 77 }, { 260, 46, 78 }, { 296, 74, 78 },
    { 220, 20, 80 }, { 256, 48, 80 }, { 262, 41, 81 }, { 298, 69, 81 }, { 266, 35, 83 }, { 302, 63, 83 }, { 308, 56, 84 }, { 344, 84, 84 },
};

__attribute__((optimize("-Os")))
const uint8_t* PDM2PCM::Decimate64(const uint8_t *pSrc, int16_t* pDst, int gain, size_t samples)
{
    auto fs = state;        // copy state to registers

    while (samples--)
    {
        const uint8_t s0 = pSrc[0], s1 = pSrc[1], s2 = pSrc[2], s3 = pSrc[3], s4 = pSrc[4], s5 = pSrc[5], s6 = pSrc[6], s7 = pSrc[7];
        interleaved_t x0 = T[s0], x1 = T[s1], x2 = T[s2], x3 = T[s3], x4 = T[s4], x5 = T[s5], x6 = T[s6], x7 = T[s7];
        pSrc += 8;

        const uint32_t a0 =         fs.s1 + x0.t2;
        const uint32_t a1 = fs.s0 + x0.t1 + x1.t2;
        const uint32_t a2 = x0.t0 + x1.t1 + x2.t2;
        const uint32_t a3 = x1.t0 + x2.t1 + x3.t2;
        const uint32_t a4 = x2.t0 + x3.t1 + x4.t2;
        const uint32_t a5 = x3.t0 + x4.t1 + x5.t2;
        const uint32_t a6 = x4.t0 + x5.t1 + x6.t2;
        const uint32_t a7 = x5.t0 + x6.t1 + x7.t2;
        const uint32_t a8 = x6.t0 + x7.t1;
        const uint32_t a9 = x7.t0;

        uint32_t smp = 28 * a0 + 21 * a1 + 15 * a2 + 10 * a3 +  6 * a4 +  3 * a5 +  1 * a6 + fs.s3;
        fs.s3        = 36 * a0 + 42 * a1 + 46 * a2 + 48 * a3 + 48 * a4 + 46 * a5 + 42 * a6 + 36 * a7 + fs.s2;
        fs.s2        =            1 * a1 +  3 * a2 +  6 * a3 + 10 * a4 + 15 * a5 + 21 * a6 + 28 * a7;
        fs.s1 = a8;
        fs.s0 = a9;

        int out = smp - 0x20000;
        out = (out * gain) >> 4;
        *pDst++ = __SSAT(out, 16);
    }

    state = fs;
    return pSrc;
}

__attribute__((optimize("-Os")))
const uint8_t* PDM2PCM::Decimate64(const uint8_t *pSrc, float* pDst, float gain, size_t samples)
{
    auto fs = state;        // copy state to registers

    gain /= 0x80000;        // direct multiplier for output value

    while (samples--)
    {
        const uint8_t s0 = pSrc[0], s1 = pSrc[1], s2 = pSrc[2], s3 = pSrc[3], s4 = pSrc[4], s5 = pSrc[5], s6 = pSrc[6], s7 = pSrc[7];
        interleaved_t x0 = T[s0], x1 = T[s1], x2 = T[s2], x3 = T[s3], x4 = T[s4], x5 = T[s5], x6 = T[s6], x7 = T[s7];
        pSrc += 8;

        const uint32_t a0 =         fs.s1 + x0.t2;
        const uint32_t a1 = fs.s0 + x0.t1 + x1.t2;
        const uint32_t a2 = x0.t0 + x1.t1 + x2.t2;
        const uint32_t a3 = x1.t0 + x2.t1 + x3.t2;
        const uint32_t a4 = x2.t0 + x3.t1 + x4.t2;
        const uint32_t a5 = x3.t0 + x4.t1 + x5.t2;
        const uint32_t a6 = x4.t0 + x5.t1 + x6.t2;
        const uint32_t a7 = x5.t0 + x6.t1 + x7.t2;
        const uint32_t a8 = x6.t0 + x7.t1;
        const uint32_t a9 = x7.t0;

        uint32_t smp = 28 * a0 + 21 * a1 + 15 * a2 + 10 * a3 +  6 * a4 +  3 * a5 +  1 * a6 + fs.s3;
        fs.s3        = 36 * a0 + 42 * a1 + 46 * a2 + 48 * a3 + 48 * a4 + 46 * a5 + 42 * a6 + 36 * a7 + fs.s2;
        fs.s2        =            1 * a1 +  3 * a2 +  6 * a3 + 10 * a4 + 15 * a5 + 21 * a6 + 28 * a7;
        fs.s1 = a8;
        fs.s0 = a9;

        *pDst++ = int(smp - 0x20000) * gain;
    }

    state = fs;
    return pSrc;
}

}
